;; Picos for OCaml 5

(rule
 (enabled_if
  (<= 5.0.0 %{ocaml_version}))
 (action
  (with-stdout-to
   picos.ml
   (progn
    (echo "module Trigger = struct\n")
    (echo "# 1 \"lib/picos/trigger.bootstrap.ml\"\n")
    (cat trigger.bootstrap.ml)
    (echo "# 1 \"lib/picos/trigger.ocaml5.ml\"\n")
    (cat trigger.ocaml5.ml)
    (echo "end\n")
    ;;
    (echo "module Computation = struct\n")
    (echo "# 1 \"lib/picos/computation.bootstrap.ml\"\n")
    (cat computation.bootstrap.ml)
    (echo "# 1 \"lib/picos/computation.ocaml5.ml\"\n")
    (cat computation.ocaml5.ml)
    (echo "# 1 \"lib/picos/computation.common.ml\"\n")
    (cat computation.common.ml)
    (echo "end\n")
    ;;
    (echo "module Fiber = struct\n")
    (echo "# 1 \"lib/picos/fiber.bootstrap.ml\"\n")
    (cat fiber.bootstrap.ml)
    (echo "# 1 \"lib/picos/fiber.ocaml5.ml\"\n")
    (cat fiber.ocaml5.ml)
    (echo "# 1 \"lib/picos/fiber.common.ml\"\n")
    (cat fiber.common.ml)
    (echo "end\n")
    ;;
    (echo "module Handler = struct\n")
    (echo "# 1 \"lib/picos/handler.bootstrap.ml\"\n")
    (cat handler.bootstrap.ml)
    (echo "# 1 \"lib/picos/handler.ocaml5.ml\"\n")
    (cat handler.ocaml5.ml)
    (echo "end\n")
    ;;
    ))))

;; Picos for OCaml 4

(rule
 (enabled_if
  (< %{ocaml_version} 5.0.0))
 (action
  (with-stdout-to
   picos.ml
   (progn
    (echo "module Bootstrap = struct\n")
    ;;
    (echo "module Trigger = struct\n")
    (echo "# 1 \"lib/picos/trigger.bootstrap.ml\"\n")
    (cat trigger.bootstrap.ml)
    (echo "end\n")
    ;;
    (echo "module Computation = struct\n")
    (echo "# 1 \"lib/picos/computation.bootstrap.ml\"\n")
    (cat computation.bootstrap.ml)
    (echo "end\n")
    ;;
    (echo "module Fiber = struct\n")
    (echo "# 1 \"lib/picos/fiber.bootstrap.ml\"\n")
    (cat fiber.bootstrap.ml)
    (echo "end\n")
    ;;
    (echo "end\n")
    ;;
    (echo "module Handler = struct\n")
    (echo "open Bootstrap\n")
    (echo "# 1 \"lib/picos/handler.bootstrap.ml\"\n")
    (cat handler.bootstrap.ml)
    (echo "# 1 \"lib/picos/handler.ocaml4.ml\"\n")
    (cat handler.ocaml4.ml)
    (echo "end\n")
    ;;
    (echo "module Trigger = struct\n")
    (echo "include Bootstrap.Trigger\n")
    (echo "# 1 \"lib/picos/trigger.ocaml4.ml\"\n")
    (cat trigger.ocaml4.ml)
    (echo "end\n")
    ;;
    (echo "module Computation = struct\n")
    (echo "include Bootstrap.Computation\n")
    (echo "# 1 \"lib/picos/computation.ocaml4.ml\"\n")
    (cat computation.ocaml4.ml)
    (echo "# 1 \"lib/picos/computation.common.ml\"\n")
    (cat computation.common.ml)
    (echo "end\n")
    ;;
    (echo "module Fiber = struct\n")
    (echo "include Bootstrap.Fiber\n")
    (echo "# 1 \"lib/picos/fiber.ocaml4.ml\"\n")
    (cat fiber.ocaml4.ml)
    (echo "# 1 \"lib/picos/fiber.common.ml\"\n")
    (cat fiber.common.ml)
    (echo "end\n")
    ;;
    ))))

;;

(library
 (name picos_thread_ocaml4)
 (package picos)
 (modules)
 (enabled_if
  (< %{ocaml_version} 5.0.0))
 (libraries
  (re_export picos.thread)))

(library
 (name picos)
 (public_name picos)
 (libraries
  backoff
  (select
   intf.ml
   from
   (picos_thread_ocaml4 -> intf.ocaml4.ml)
   (-> intf.ocaml5.ml))))

(mdx
 (package picos_meta)
 (enabled_if
  (and
   (<= 4.14.0 %{ocaml_version})
   (< %{ocaml_version} 5.0.0)))
 (libraries picos picos_mux.thread picos_std.structured)
 (files picos.mli))

(mdx
 (package picos_meta)
 (enabled_if
  (<= 5.0.0 %{ocaml_version}))
 (libraries picos picos_mux.random picos_std.structured)
 (files picos.mli))

(documentation
 (package picos)
 (mld_files index))
